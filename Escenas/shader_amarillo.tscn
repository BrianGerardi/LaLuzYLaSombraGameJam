[gd_scene load_steps=7 format=3 uid="uid://me6ktgv3q747"]

[sub_resource type="Shader" id="Shader_paavc"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
uniform sampler2D gradient;
uniform float spread = 0.5;
uniform float cutoff = 0.1;
uniform float size = 1.0;
uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity = 0.3;
uniform float core_intensity = 2.0;
uniform bool hdr = false;
uniform float seed = 5.0;

float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}

float noise(in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));
    vec2 u = f * f * (3.0-2.0 * f);
    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}

vec4 screen(vec4 base, vec4 blend){
    return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment() {
    vec2 centered_uv = (UV - 0.5) * size;
    float radius = length(centered_uv);
    float angle = atan(centered_uv.y, centered_uv.x) + PI; // Add PI to fix left side cutoff

    vec2 ray1 = vec2(angle * ray1_density + TIME * speed + seed + sin(angle * 3.0), radius * 2.0);
    vec2 ray2 = vec2(angle * ray2_density + TIME * speed * 1.5 + seed + cos(angle * 2.0), radius * 2.0);

    float cut = 1.0 - smoothstep(cutoff, cutoff + 0.2, radius);
    ray1 *= cut;
    ray2 *= cut;

    float rays = hdr ?
        noise(ray1) + (noise(ray2) * ray2_intensity) :
        clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);

    rays *= smoothstep(spread, spread * 0.3, radius);
    float core = smoothstep(0.2, 0.0, radius) * core_intensity;
    rays += core;

    vec4 gradient_color = texture(gradient, vec2(rays, 0.5));
    vec3 shine = vec3(rays) * gradient_color.rgb;

    float blur_amount = radius * 0.1;
    vec2 blur_uv = SCREEN_UV + centered_uv * blur_amount;
    vec4 blurred = texture(SCREEN_TEXTURE, blur_uv);
    shine = screen(blurred, vec4(shine, rays)).rgb;

    COLOR = vec4(shine, rays * gradient_color.a);
}"

[sub_resource type="Gradient" id="Gradient_8gfc1"]
offsets = PackedFloat32Array(0.622222, 0.788889, 0.922222)
colors = PackedColorArray(0, 0, 0, 1, 0.839216, 0.4, 0.0431373, 1, 0, 0, 0, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_f2sig"]
gradient = SubResource("Gradient_8gfc1")
fill = 1
fill_from = Vector2(0.5, 0.5)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ixwaw"]
shader = SubResource("Shader_paavc")
shader_parameter/gradient = SubResource("GradientTexture2D_f2sig")
shader_parameter/spread = 0.5
shader_parameter/cutoff = 0.19
shader_parameter/size = -0.405
shader_parameter/speed = 1.11
shader_parameter/ray1_density = 8.525
shader_parameter/ray2_density = 28.395
shader_parameter/ray2_intensity = 0.635
shader_parameter/core_intensity = 2.125
shader_parameter/hdr = true
shader_parameter/seed = -0.265

[sub_resource type="Gradient" id="Gradient_eswrr"]
offsets = PackedFloat32Array(0.719298, 0.912281)
colors = PackedColorArray(0.118289, 1.08384e-05, 0.118288, 1, 0.527338, 0.0258788, 0.528881, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_xmroj"]
gradient = SubResource("Gradient_eswrr")
fill = 1
fill_from = Vector2(0.5, 0.5)

[node name="ShaderAmarillo" type="Node2D"]

[node name="SpriteShader2" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_ixwaw")
scale = Vector2(1.31384, 1.72779)
texture = SubResource("GradientTexture2D_xmroj")
